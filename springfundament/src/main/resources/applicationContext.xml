<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--    开启注解以使用@Autowired、@Resources等注解可以起作用-->
    <context:annotation-config/>
    <!--    开启context扫描-->
    <context:component-scan base-package="com.springstarter"/>

    <!--  ************************ ioc_01 **********************************************************  -->
    <bean id="cleanAir" class="com.springstarter.b02_spring_fundament.ioc_01.CleanAir">
        <qualifier value="cleanair"/>
    </bean>
    <bean id="dirtyAir" class="com.springstarter.b02_spring_fundament.ioc_01.DirtyAir">
        <qualifier value="dirtyair"/>
    </bean>
    <bean id="person" class="com.springstarter.b02_spring_fundament.ioc_01.Person"/>
    <!--  ****** ioc_01 end ******  -->

    <!--  ********************** ioc_container ********************************************************  -->
    <!--  ^^^^^^^^^^^ ioc_container - bean_config_01 ^^^^^^^^^^^^^^  -->
    <!--    基于XML配置Bean-->
    <bean id="user" class="com.springstarter.c03_spring_ioc.ioc_container.bean_config_01.UserBean"/>

    <!--    基于Java类配置Bean-->
    <bean id="conf" class="com.springstarter.c03_spring_ioc.ioc_container.bean_config_01.AppConf"/>
    <!--  ^^^^^ end ^^^^^^^  -->

    <!--  ^^^^^^^^^^^ ioc_container - bean_inject_02 -> xml_inject ^^^^^^^^^^^^^^  -->
    <bean id="xmlinstance" class="com.springstarter.c03_spring_ioc.ioc_container.bean_inject_02.xml_inject.field_constructor.XMLInstance">

        <!-- 属性注入-->
        <!-- name-属性名, value-设置基本数据类型的属性值, 在spring配置文件中，bean之间可以相互引用，引用时可以用<ref>标签配置bean的id属性-->
        <property name="air" ref="cleanAir"/>
        <property name="name" value="Kavin"/>

        <!-- 构造函数注入-->
        <!-- 使用constructor-arg设置构造函数的参数，index设置参数的顺序,ref引用bean的id,value设置构造函数参数值-->
        <constructor-arg index="1" ref="cleanAir"/>
        <constructor-arg index="0" value="Kavin" />

    </bean>

    <!--工厂方法注入-->
    <!--    静态工厂方法: 只需设置工厂方法对应的类，以及对应的工厂方法-->
    <bean id="xmlfactorystaticinstance" class="com.springstarter.c03_spring_ioc.ioc_container.bean_inject_02.xml_inject.factory.XMLFactory" factory-method="CreateStaticInsance"/>
    <!-- 实例工厂方法：先实例化工厂类，再通过工厂类对象调用实例方法获取bean对象-->
    <bean id="xmlfactory" class="com.springstarter.c03_spring_ioc.ioc_container.bean_inject_02.xml_inject.factory.XMLFactory"/>
    <bean id="xmlfactoryinstance" factory-bean="xmlfactory" factory-method="CreateInstance" destroy-method="DestroyMethod" init-method="InitMethod"/>

    <!-- 自定义属性编辑器 -->
    <bean id="customEditorConfigurer" class="org.springframework.beans.factory.config.CustomEditorConfigurer">
        <!--        将日期字符串转换为java.util.Date对象-->
        <property name="customEditors">
            <map>
                <entry key="java.util.Date" value="com.springstarter.c03_spring_ioc.ioc_container.bean_inject_02.xml_inject.property_editor.CustomerProperty"/>
            </map>
        </property>
    </bean>
    <bean id="xmlCollectionsDemo" class="com.springstarter.c03_spring_ioc.ioc_container.bean_inject_02.xml_inject.property_editor.XmlCollectionsDemo">
        <!--    常见数据类型注入-->
        <!--    List属性注入-->
        <property name="lists">
            <list>
                <value>1</value>
                <ref bean="cleanAir"/>
                <bean class="com.springstarter.b02_spring_fundament.ioc_01.CleanAir"/>
            </list>
        </property>
        <!-- Set属性注入 -->
        <property name="sets">
            <set>
                <value>1</value>
                <ref bean="cleanAir"/>
                <bean class="com.springstarter.b02_spring_fundament.ioc_01.CleanAir"/>
            </set>
        </property>
        <!-- Map属性注入 -->
        <property name="maps">
            <map>
                <entry key="key1" value="1"/>
                <entry key="key2" value-ref="cleanAir"/>
                <entry key="key3">
                    <bean class="com.springstarter.b02_spring_fundament.ioc_01.CleanAir"/>
                </entry>
            </map>
        </property>
        <!-- Properties属性注入 -->
        <property name="props">
            <props>
                <prop key="prokey1">prokeyA</prop>
                <prop key="prokey2">prokeyB</prop>
            </props>
        </property>
        <!-- 注入Date类型属性 -->
        <property name="date" value="2023-06-03"/>
    </bean>
    <!--  ^^^^^ end ^^^^^^^  -->

    <!--  ^^^^^^^^^^^ ioc_container - bean_scope_lifecycle_03 ^^^^^^^^^^^^^^  -->
        <bean id="userBean" class="com.springstarter.c03_spring_ioc.ioc_container.bean_scope_lifecycle_03.UserBean" destroy-method="myDestroy" init-method="myInit">
            <property name="name" value="Kavin"/>
        </bean>
        <bean id="postProcessor" class="com.springstarter.c03_spring_ioc.ioc_container.bean_scope_lifecycle_03.CustomBeanPostProcessor"/>
    <!--  ^^^^^ end ^^^^^^^  -->

    <!--  ****** ioc_container end ******  -->

    <!--  ****** d04_spring_aop ******  -->
    <!--  ^^^^^^^^^^^ proxy_01 ^^^^^^^^^^^^^^  -->
    <bean id="aopInterceptor" class="org.springframework.aop.support.NameMatchMethodPointcutAdvisor">
        <property name="advice">
            <bean class="com.springstarter.d04_spring_aop.proxy_01.AOPInterceptor"/>
        </property>
        <property name="mappedName" value="withAopMethod"/>
    </bean>

    <bean id="aopService" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="interceptorNames">
            <list>
                <value>aopInterceptor</value>
            </list>
        </property>
        <property name="target">
            <bean class="com.springstarter.d04_spring_aop.proxy_01.AOPServicesImpl">
                <property name="description" value="basicAop"/>
            </bean>
        </property>
    </bean>
    <!--  ^^^^^ end ^^^^^^^  -->

    <!--  ^^^^^^^^^^^ aspectj_xml_config_02 ^^^^^^^^^^^^^^  -->
    <bean id="serviceImplA" class="com.springstarter.d04_spring_aop.proxy_01.AOPServicesImpl">
        <property name="description" value="basicAop"/>
    </bean>
    <bean id="serviceAspectBean" class="com.springstarter.d04_spring_aop.aspectj_xml_config_02.XMLAdvice"/>
    <aop:config>
        <aop:aspect id="serviceAspect" ref="serviceAspectBean">
            <aop:pointcut id="servicePointcut" expression="execution(* com.springstarter.d04_spring_aop.proxy_01.AOPServicesImpl.*(..))"/>
            <aop:before pointcut-ref="servicePointcut" method="beforeAdvice"/>
            <aop:after pointcut-ref="servicePointcut" method="afterAdvice"/>
            <aop:after-returning pointcut-ref="servicePointcut" method="afterReturnAdvice" returning="result"/>
            <aop:around pointcut-ref="servicePointcut" method="aroundAdvice"/>
            <aop:after-throwing pointcut-ref="servicePointcut" method="throwingAdvice" throwing="e"/>
        </aop:aspect>
    </aop:config>
    <!--  ^^^^^ end ^^^^^^^  -->

    <!--  ^^^^^^^^^^^ aspect_annotation_config_03 ^^^^^^^^^^^^^^  -->
    <!-- 自动为切面方法中匹配的方法所在的类生成代理对象 -->
    <aop:aspectj-autoproxy/>
    <!--  ^^^^^ end ^^^^^^^  -->

    <!--  ****** d04_spring_aop end ******  -->

    <!--  ************************ com.springstarter.e05_spring_dao start **********************************************************  -->

    <!--  ^^^^^ com.springstarter.e05_spring_dao.spring_dao_02.JdbcDaoSupport ^^^^^^^  -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName">
            <value>com.mysql.cj.jdbc.Driver</value>
        </property>
        <property name="url">
            <value>jdbc:mysql://127.0.0.1:3306/daodemodb</value>
        </property>
        <property name="username">
            <value>root</value>
        </property>
        <property name="password">
            <value>root</value>
        </property>
    </bean>
    <bean id="userDao" class="com.springstarter.e05_spring_dao.spring_dao_02.JdbcDaoSupport.SpringDAODemo" depends-on="dataSource">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--  ^^^^^ com.springstarter.e05_spring_dao.spring_dao_02.sqlupdate.UserSqlUpdate ^^^^^^^  -->
    <bean id="userSqlUpdate" class="com.springstarter.e05_spring_dao.spring_dao_02.sqlupdate.UserSqlUpdate">
        <constructor-arg ref="dataSource" index="0"/>
    </bean>
    <!--  ^^^^^ end ^^^^^^^  -->

    <!--    配置事务管理对象-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--    配置业务层代理-->
    <bean id="userDaoProxy" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
    <!--        配置目标对象-->
        <property name="target" ref="userDao"/>
    <!--        注入事务管理器-->
        <property name="transactionManager" ref="transactionManager"/>
    <!--        注入事务的属性-->
        <property name="transactionAttributes">
            <props>
                <prop key="transfer">PROPAGATION_REQUIRED</prop>
            </props>
        </property>
    </bean>
    <!--  ************************ com.springstarter.e05_spring_dao end **********************************************  -->


</beans>